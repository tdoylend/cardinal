class Bool {}
class Fiber {}
class Fn {}
class Null {}
class Num {}

class Sequence {
	all(predicate) {
		for (element in this) {
			if (!predicate.call(element)) return false;
		}
		return true;
	}

	any(predicate) {
		for (element in this) {
			if (predicate.call(element)) return true;
		}
		return false;
	}

	contains(element) {
		for (x in this) {
			if (element == x) return true
		}
		return false;
	}

	count {
		var result = 0
		for (element in this) result += 1
		return result
	}
	
	count(predicate) {
		var result = 0
		for (element in this) {
			if (predicate.call(element)) result += 1
		}
		return result
	}

	each(fn) {
		var index = 0
		for (element in this) {
			fn.call(element, index)
			index += 1
		}
	}

	empty { iterate(null) ? false : true }

	map(fn) { MapSequence.new(this, fn) }

	skip(count) {
		if (!(count is Num) || !count.is_integer || count < 0) {
			Fiber.abort("The `count` parameter must be a non-negative integer.");
		}
		return SkipSequence.new(this,count)
	}

	take(count) {
		if (!(count is Num) || !count.is_integer || count < 0) {
			Fiber.abort("The `count` parameter must be a non-negative integer.");
		}
		return TakeSequence.new(this,count)
	}

	where(predicate) { WhereSequence.new(this, predicate) }

	reduce(accumulator, fn) {
		for (element in this) {
			accumulator = fn.call(accumulator, element)
		}
		return accumulator
	}

	reduce(fn) {
		var iter = iterate(null)
		if (!iter) Fiber.abort("The %(name) cannot be reduced because it is empty.")
		var result = iteratorValue(iter)
		while (iter = iterate(iter)) {
			result = fn.call(result, iteratorValue(iter))
		}
		return result
	}

	join() { join("") }

	join(separator) {
		var first = true
		var result = Byte_Buffer.new()
		for (element in this) {
			if (!first) result.add(separator)
			first = false
			result.add(element.toString)
		}
		return result.detach()
	}

	to_list {
		var result = List.new()
		for (element in this) result.add(element)
		return result
	}
}

class String is Sequence {
	bytes { StringByteSequence.new(this }
	codepoints { StringCodepointSequence.new(this) }

	split(delimiter) {
		if (!(delimiter is String) || (delimiter.is_empty)) {
			Fiber.abort("The delimiter must be a non-empty string.")
		}
		//@todo
	}
}

class List is Sequence {
	add_all(other) {
		for (element in other) {
			add(element)
		}
		return other
	}

	sort() { sort {|low, high| low < high } }

	sort(comparer) {

	}
}


